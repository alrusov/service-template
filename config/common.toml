# Все пути в конфигурации могут указываться либо в абсолютном виде (/opt/app/logs), либо относительным (logs или logs/).
# Относительные пути вычисляются приложением относительно исполняемого файла - его физического расположения, а не линка на него!
# Модификаторами в первом символе можно задать специальное значение:
#  @ -- рабочая директория (cwd) на момент запуска приложения. Примеры: @/xxx.toml или @aaa/bbb.ico (слеш после @ не обязателен).
#  $ -- текущая рабочая директория. Если с момента запуска приложения она не менялась, то совпадает с @.
#       Примеры: $/xxx.toml или $aaa/bbb.ico (слеш после $ не обязателен).
#  ^ -- базовая директория, зависит от контекста. Обычно совпадает с @. Но может быть изменена в коде приложения. Например, для конфига это 
#       место расположения основного конфиг файла. Примеры: ^/xxx.toml или ^aaa/bbb.ico (слеш после ^ не обязателен).

# Параметры таймаутов, задержек и т.п. в большинстве случаев указываются в виде строки "<величина><единица измерения>". Допустимые единицы:
#   ns -- наносекунды
#   us -- микросекунды
#   ms -- миллисекунды
#   s  -- секунды (по умолчанию)
#   m  -- минуты
#   h  -- часы
#   d  -- дни

# Для переноса на новую строку используется символ \ в конце строки

# Для подстановки переменных из environment используется конструкция {$имя_переменной}, например:
# bind-addr = "127.0.0.1:{$PORT}"

# Для вставки содержимого другого файла используется конструкция {#имя_файла}, например:
# {#/opt/app/users.toml}
# Если не указан полный путь, то файл ищется относительно расположения выполняемого файла:
# {#../users.toml}

#----------------------------------------------------------------------------------------------------------------------------#

# Общие стандартные параметры

#[common]

# Писать логи в локальном времени, по умолчанию в UTC
#log-local-time = true

# Директория, куда пишутся логи. Если указан относительный путь, то он используется относительно директории исполняемого файла
log-dir = "^/logs"

# Уровень логирования для основного facility и по умолчанию для остальных
# Допустимые значения EMERG, ALERT, CRIT, ERR, WARNING, NOTICE, INFO, TIME, DEBUG, TRACE1, TRACE2, TRACE3, TRACE4
# По умолчанию DEBUG
log-level = "{$LOG_LEVEL}"

# Индивидуальные уровни логирования для отдельных facility
log-levels = { "stdhttp" = "{$LOG_LEVEL}", }

# Размер буфера лога в байтах, данные выталкиваются в файл при его заполнении, 0 - не использовать буферизацию
log-buffer-size = 0

# Если используется буферизация логов (log-buffer-size > 0), то это время, через которое производится автоматическое выталкивание в файл не до конца заполненного буфера.
# По умолчанию (в том числе и при значении 0) -- 1s
log-buffer-delay = "0s"

# максимальная длина строки в логе
log-max-string-len = 10000000


# Максимальное количество процессорных ядер, которое может использовать приложение. По умолчанию 0 - все доступные
go-max-procs = 0


# Период записи в лог статистики использования памяти
mem-stats-period = "30m"

# Уровень логирования для статистики использования памяти
mem-stats-level = "INFO"


# Период усреднения статистики
load-avg-period = "1m"


# Разрешить запуск интерфейса профайлера
profiler-enabled = false

# Расширенное профилирование. Без нужды не включать!
deep-profiling = false

# Использовать стандартную (надежно) или альтернативную (быстрее) библиотеку JSON
use-std-json = false

# Надо ли игнорировать проверку сертификата сервера на валидность в тех местах, где нет отдельной подобной настройки
skip-tls-verification = true

# Минимальный размер отправляемых по http данных, для которых требуется запаковка gzip. Меньший размер не пакуется и отправляется как есть
# 0  - паковать всегда
# <0 - не паковать
min-size-for-gzip = 256

#----------------------------------------------------------------------------------------------------------------------------#
