# Все пути в конфигурации могут указываться либо в абсолютном виде (/opt/app/logs), либо относительным (logs или logs/).
# Относительные пути вычисляются приложением относительно исполняемого файла - его физического расположения, а не линка на него!
# Модификаторами в первом символе можно задать специальное значение:
#  @ -- рабочая директория на момент запуска приложения. Примеры: $/xxx.toml или $aaa/bbb.ico (слеш после $ не обязателен).
#  $ -- текущая рабочая директория, если с момента запуска приложения она не менялась, то совпадает с $. Примеры: @/xxx.toml или @aaa/bbb.ico (слеш после @ не обязателен).
#  ^ -- базовая директория, зависит от контекста. Для конфига это место расположения основного конфиг файла. Примеры: ^/xxx.toml или ^aaa/bbb.ico (слеш после ^ не обязателен).

# Параметры таймаутов, задержек и т.п. в большинстве случаев указываются в виде строки "<величина><единица измерения>". Допустимые единицы:
#   ns -- наносекунды
#   us -- микросекунды
#   ms -- миллисекунды
#   s  -- секунды (по умолчанию)
#   m  -- минуты
#   h  -- часы
#   d  -- дни

# Для переноса на новую строку используется символ \ в конце строки

# Для подстановки переменных из environment используется конструкция {$имя_переменной}, например:
# bind-addr = "127.0.0.1:{$PORT}"

# Для вставки содержимого другого файла используется конструкция {#имя_файла}, например:
# {#/opt/app/users.toml}
# Если не указан полный путь, то файл ищется относительно расположения выполняемого файла:
# {#../users.toml}

#----------------------------------------------------------------------------------------------------------------------------#

# Общие стандартные параметры

[common]
# Название приложения
name = "Service template"

# Описание приложения
description = "Service example"

# Класс приложения
class = ""


# Писать логи в локальном времени, по умолчанию в UTC
#log-local-time = true

# Директория, куда пишутся логи. Если указан относительный путь, то он используется относительно директории исполняемого файла
log-dir = "logs"

# Уровень логирования для основного facility и по умолчанию для остальных
# Допустимые значения EMERG, ALERT, CRIT, ERR, WARNING, NOTICE, INFO, TIME, DEBUG, TRACE1, TRACE2, TRACE3, TRACE4
# По умолчанию DEBUG
log-level = "{$LOG_LEVEL}"

# Индивидуальные уровни логирования для отдельных facility
log-levels = { "stdhttp" = "{$LOG_LEVEL}", }

# Размер буфера лога в байтах, данные выталкиваются в файл при его заполнении, 0 - не использовать буферизацию
log-buffer-size = 0

# Если используется буферизация логов (log-buffer-size > 0), то это время, через которое производится автоматическое выталкивание в файл не до конца заполненного буфера.
# По умолчанию (в том числе и при значении 0) -- 1s
log-buffer-delay = "0s"

# максимальная длина строки в логе
log-max-string-len = 10000


# Максимальное количество процессорных ядер, которое может использовать приложение. По умолчанию 0 - все доступные
go-max-procs = 0


# Период записи в лог статистики использования памяти
mem-stats-period = "30m"

# Уровень логирования для статистики использования памяти
mem-stats-level = "INFO"


# Период усреднения статистики
load-avg-period = "1m"


# Разрешить запуск интерфейса профайлера
profiler-enabled = false

# Расширенное профилирование. Без нужды не включать!
deep-profiling = false

# Использовать стандартную (надежно) или альтернативную (быстро) библиотеку JSON
use-std-json = false

# Надо ли игнорировать проверку сертификата сервера на валидность в тех местах, где нет отдельной подобной настройки
skip-tls-verification = true

# Минимальный размер отправляемых по http данных, для которых требуется запаковка gzip. Меньший размер не пакуется и отправляется как есть
# 0  - паковать всегда
# <0 - не паковать
min-size-for-gzip = 256

#----------------------------------------------------------------------------------------------------------------------------#

# Параметры http интерфейса

[http]
# Листенер
listener = { \
	# Адрес, на котором слушать
	bind-addr = ":{$PORT}", \
	# Путь до файла сертификата
	ssl-combined-pem = "", \
	# Таймаут
	timeout = "5s", \
	# Путь до директории, где будут искаться endpoints, которые не найдены внутри приложения перед выдачей 404
	root = "html/", \
	# Префикс, который может добавляться прокси для идентификации приложения
	proxy-prefix = "/service-template/", \
	# Файл иконки приложения
	icon-file = "$html/favicon.ico", \
	# Список endpoints, доступ к которым закрыт для всех
	disabled-endpoints = [], \
	auth = { \
		# endpoints, для которых требуется производить авторизацию со списком пользователей и групп
		# у группы перед названием добавляется символ "@"
		# для запрета доступа пользователя или группы используется символ "!"
		# "*" -- все
		#
		# пример: {"/xxx*" = ["*"], "!/xxx/aaa" = [], "/yyy" = ["user1", "user2", "@group1", "!user3"] }
		#   к /xxx и всем потомкам разрешен доступ всем аутентифицированным пользователям;
		#   к /xxx/aaa аутентификация и авторизация не производится, несмотря на то, что это потомок /xxx
		#   к /yyy доступ разрешен user1, user2 и группе group1, a user3 запрещен, даже если он в ходит в разрешенную группу

		endpoints = { \
			"*"              = ["*"], \
			"/maintenance"   = ["@admins"], \
			"/debug*"        = ["*"], \
			"!/debug/pprof*" = [], \
			"!/tools/*"      = [], \
		}, \

		# список пользователей в виде пар login[@groups...]=sha512(password_with_salt)
		# рекомендуется хранить его в отдельном файле, общем для всех приложений и включать его в конфигурацию инструкцией #include

		users = {{#include ^users.toml}}, \

		# параметры методов аутентификации
		#   enabled -- использовать метод или нет
		#   score   -- очередность проверки и добавления в http заголовок (меньше значение -- раньше проверка)
		#   options -- дополнительные опции метода, зависят от типа

		methods = { \
			# JWT, сам токен можно создать в приложении -- endpoint /tools/jwt-login?u=<логин>&p=<пароль>
			# Опции:
			#   secret   -- секрет для подписи jwt токенов
			#   lifetime -- время жизни jwt токена
			jwt   = { enabled = false, score = 10, options = { secret = "?", lifetime = "3650d" } }, \

			# Kerberous
			# Опции:
			#   krb5-key-file -- путь до kerberos keytab файла
			krb5  = { enabled = false, score = 20, options = { key-file = "?" } }, \

			# Basic
			# Опции:
			#   нет дополнительных опций
			basic = { enabled = false, score = 30, options = {} }, \

			# OAuth2 с keycloak в качестве identity server
			# Должен быть последним (иметь максимальный score), так как он запрещает использование последующих методов аутентификации
			# Опции:
			#   domain                -- имя домена для установки cookie, должен совпадать с доменом "me", в крайнем случае можно указать IP
			#   auth-server           -- URL keycloak server
			#   gzip                  -- надо ли паковать пакеты перед отправкой
			#   timeout               -- таймаут взаимодействия с keycloak server
			#   skip-tls-verification -- не производить проверку сертификата сервера?
			#   client-realm          -- realm клиента в keycloak
			#   client-id             -- ID клиента в keycloak
			#   client-secret         -- secret клиента в keycloak
			#   check-acr             -- дополнительная проверка поля acr токена, при доступе к приложениям по IP рекомендуется отключить
			kc    = { enabled = false, score = 99, options = { domain = "localdomain", auth-server = "127.0.0.1", gzip = false, timeout = "5s", skip-tls-verification = true, client-realm = "?", client-id = "?", client-secret = "?", check-acr = false } }, \
		} \
	} \
}

# Подробнее про формат списков disabled-endpoints и auth.endpoints:
#   "*"            -- все
#   "<endpoint>"   -- данный endpoint входит, его потомки нет. Пример: "/aaa" -- /aaa входит, /aaa/bbb нет
#   "<endpoint>*"  -- данный endpoint и его потомки входят. Пример: "/aaa*" -- входят /aaa, /aaa/bbb, /aaa/bbb/ccc
#   "<endpoint>/*" -- все потомки входят, он сам нет. Пример: "/aaa/*" -- /aaa не входит, /aaa/bbb и /aaa/bbb/ccc входят
#   "!<endpoint>"  -- не входит. Имеет смысл, если надо исключить из списка конкретный endpoint, который попадает под другие правила
#                     Пример: [ "*", "!/aaa/bbb" ] -- входят все, кроме /aaa/bbb
#                     Другой пример: [ "/aaa*", "!/aaa/bbb" ] -- /aaa и /aaa/bbb/ccc входят, /aaa/bbb нет
#                     В auth.endpoints для описаний с "!" список групп игнорируется, т.е. для аутентификация для данного endpoint
#                     отключается полностью

#----------------------------------------------------------------------------------------------------------------------------#

# Дополнительные параметры

[others]
{#include ^include-example.toml}

#----------------------------------------------------------------------------------------------------------------------------#
