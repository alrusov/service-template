# Путь до файла сертификата
ssl-combined-pem = "", \

# Таймаут
timeout = "5s", \

# Путь до директории, где будут искаться endpoints, которые не найдены внутри приложения перед выдачей 404
root = "@/html/", \

# Файл иконки приложения
icon-file = "@/html/favicon.ico", \

# Список endpoints, доступ к которым закрыт для всех
disabled-endpoints = [], \

auth = { \
	# endpoints, для которых требуется производить авторизацию со списком пользователей и групп
	# у группы перед названием добавляется символ "@"
	# для запрета доступа пользователя или группы используется символ "!"
	# "*" -- все
	#
	# пример: {"/xxx*" = ["*"], "!/xxx/aaa" = [], "/yyy" = ["user1", "user2", "@group1", "!user3"] }
	#   к /xxx и всем потомкам разрешен доступ всем аутентифицированным пользователям;
	#   к /xxx/aaa аутентификация и авторизация не производится, несмотря на то, что это потомок /xxx
	#   к /yyy доступ разрешен user1, user2 и группе group1, a user3 запрещен, даже если он в ходит в разрешенную группу

	endpoints = { \
		"*"              = ["*"], \
		"/maintenance"   = ["@admins"], \
		"/debug*"        = ["*"], \
		"!/oauth/*"      = [], \
		"!/favicon.ico"  = [], \
		"!/___.css"      = [], \
		"!/debug/pprof*" = [], \
		"!/tools/*"      = [], \
	}, \

	# список пользователей в виде пар login[@groups...]=sha512(password_with_salt)
	# рекомендуется хранить его в отдельном файле, общем для всех приложений и включать его в конфигурацию инструкцией #include

	users = {{#include ^/users.toml}}, \

	# параметры методов аутентификации
	#   enabled -- использовать метод или нет
	#   score   -- очередность проверки и добавления в http заголовок (меньше значение -- раньше проверка)
	#   options -- дополнительные опции метода, зависят от типа

	methods = { \
		# Имя пользователя и его пароль передаются в открытом виде в GET параметрах u и p соответственно.
		# Возможен вариант передачи не пароля, а его хэша.
		# Опции:
		#   hashed-password -- пароль передается в хешированном виде (см. /tools/sha)
		url   = { enabled = false, score = 10, options = { hashed-password = true } }, \

		# JWT, сам токен можно создать в приложении -- endpoint /tools/jwt-login?u=<логин>&p=<пароль>
		# Опции:
		#   secret   -- секрет для подписи jwt токенов
		#   lifetime -- время жизни jwt токена
		jwt   = { enabled = false, score = 20, options = { secret = "?", lifetime = "3650d" } }, \

		# Kerberous
		# Опции:
		#   krb5-key-file -- путь до kerberos keytab файла
		krb5  = { enabled = false, score = 30, options = { key-file = "?" } }, \

		# Basic
		# Опции:
		#   нет дополнительных опций
		basic = { enabled = false, score = 40, options = {} }, \

		# OAuth2 с keycloak в качестве identity server
		# Должен быть последним (иметь максимальный score), так как он запрещает использование последующих методов аутентификации
		# Опции:
		#   domain                -- имя домена для установки cookie, в крайнем случае можно указать IP
		#   auth-server           -- URL keycloak server
		#   gzip                  -- надо ли паковать пакеты перед отправкой
		#   timeout               -- таймаут взаимодействия с keycloak server
		#   skip-tls-verification -- не производить проверку сертификата сервера?
		#   client-realm          -- realm клиента в keycloak
		#   client-id             -- ID клиента в keycloak
		#   client-secret         -- secret клиента в keycloak
		#   check-acr             -- дополнительная проверка поля acr токена, при доступе к приложениям по IP рекомендуется отключить
		kc    = { enabled = false, score = 99, options = { domain = "localdomain", auth-server = "127.0.0.1", gzip = false, timeout = "5s", skip-tls-verification = true, client-realm = "?", client-id = "?", client-secret = "?", check-acr = false } }, \
	} \
} \

# Подробнее про формат списков disabled-endpoints и auth.endpoints:
#   "*"            -- все
#   "<endpoint>"   -- данный endpoint входит, его потомки нет. Пример: "/aaa" -- /aaa входит, /aaa/bbb нет
#   "<endpoint>*"  -- данный endpoint и его потомки входят. Пример: "/aaa*" -- входят /aaa, /aaa/bbb, /aaa/bbb/ccc
#   "<endpoint>/*" -- все потомки входят, он сам нет. Пример: "/aaa/*" -- /aaa не входит, /aaa/bbb и /aaa/bbb/ccc входят
#   "!<endpoint>"  -- не входит. Имеет смысл, если надо исключить из списка конкретный endpoint, который попадает под другие правила
#                     Пример: [ "*", "!/aaa/bbb" ] -- входят все, кроме /aaa/bbb
#                     Другой пример: [ "/aaa*", "!/aaa/bbb" ] -- /aaa и /aaa/bbb/ccc входят, /aaa/bbb нет
#                     В auth.endpoints для описаний с "!" список групп игнорируется, т.е. для аутентификация для данного endpoint
#                     отключается полностью
